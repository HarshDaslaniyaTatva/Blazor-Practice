@using BlazorWebApp.Dtos
@inject IProductService productService
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="container">
    <ViewModal product="@product"></ViewModal>
    <EditModal product="@product" OnSave="HandleEditModel"></EditModal>
    <DeleteModal product="@product" OnSave="HandleDeleteModel"></DeleteModal>
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <label class="input-group-text" for="searchField">Search Field</label>
                <select class="form-select" id="searchField" @bind="@searchField">
                    <option value="ProductId">Product Id</option>
                    <option value="Name">Name</option>
                    <option value="Description">Description</option>
                    <option value="Price">Price</option>
                    <option value="StockQuantity">Stock Quantity</option>
                </select>
                <input type="text" class="form-control" @bind="@searchText" placeholder="Search...">
                <button class="btn btn-primary" @onclick="Search">Search</button>
            </div>
        </div>
        <div class="col-md-6">

            <div class="input-group">
                <label class="input-group-text" for="pageSize">Page Size</label>
                <select class="form-select" id="pageSize" @onchange="ChangePageSize">
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                </select>
            </div>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col" @onclick="() => SortTable(nameof(GetProductDtos.ProductId))">
                    Product Id
                    @RenderSortIcon(nameof(GetProductDtos.ProductId))
                </th>
                <th scope="col" @onclick="() => SortTable(nameof(GetProductDtos.Name))">
                    Name
                    @RenderSortIcon(nameof(GetProductDtos.Name))
                </th>
                <th scope="col" @onclick="() => SortTable(nameof(GetProductDtos.Description))">
                    Description
                    @RenderSortIcon(nameof(GetProductDtos.Description))
                </th>
                <th scope="col" @onclick="() => SortTable(nameof(GetProductDtos.Price))">
                    Price
                    @RenderSortIcon(nameof(GetProductDtos.Price))
                </th>
                <th scope="col" @onclick="() => SortTable(nameof(GetProductDtos.StockQuantity))">
                    Stock Quantity
                    @RenderSortIcon(nameof(GetProductDtos.StockQuantity))
                </th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.StockQuantity</td>
                    <td>
                        <div class="d-flex align-content-center justify-content-center">
                            <button class="btn btn-outline-dark me-1" @onclick="() => HandleViewModel(product.ProductId)">View</button>
                            <button class="btn btn-outline-secondary mx-1" @onclick="()=> ShowEditModel(product.ProductId)">Edit</button>
                            <button class="btn btn-outline-danger ms-1" @onclick="()=> ShowDeleteModel(product.ProductId)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <nav aria-label="Pagination">
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadData(1)">First</button>
            </li>
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadData(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageNumber = i;
                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => LoadData(pageNumber)">@pageNumber</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadData(currentPage + 1)">Next</button>
            </li>
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadData(totalPages)">Last</button>
            </li>
        </ul>
    </nav>


</div>

@code {
    private List<GetProductDtos> products = new();
    private GetProductDtos product = new();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private string searchField = "Name";
    private string searchText = "";
    private string sortBy = nameof(GetProductDtos.ProductId);
    private bool sortAsc = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(currentPage);
    }

    public async Task LoadData(int page)
    {
        var response = await productService.GetProduct(pageSize, page, sortBy, sortAsc, searchField, searchText);
        products = response.ProductList;
        totalPages = response.TotalPage;
        currentPage = page;
        StateHasChanged();
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadData(currentPage);
    }

    private async Task SortTable(string field)
    {
        if (sortBy == field)
        {
            sortAsc = !sortAsc;
        }
        else
        {
            sortBy = field;
            sortAsc = true;
        }

        await LoadData(currentPage);
    }

    private MarkupString RenderSortIcon(string field)
    {
        if (sortBy == field)
        {
            string iconClass = sortAsc ? "bi bi-caret-up" : "bi bi-caret-down";
            return (MarkupString)$"<i class='{iconClass}'></i>"; 
        }
        return new MarkupString("");
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadData(currentPage);
        }
    }

    private  async void HandleViewModel(int id)
    {
        GetProductDtos? data = await productService.GetProduct(id);

        //show toast if data not found----------------------

        product = data ??  new();

        await JSRuntime.InvokeVoidAsync("showModal", "ViewModal");
        StateHasChanged();

    }
    private async void ShowEditModel(int id)
    {
        GetProductDtos? data = await productService.GetProduct(id);

        //show toast if data not found----------------------

        product = data ?? new();

        await JSRuntime.InvokeVoidAsync("showModal", "EditModal");
        StateHasChanged();

    }
    public async void HandleEditModel(GetProductDtos product)
    {
        var response= await productService.UpdateProduct(product);

        //show toast if data not found----------------------

        await JSRuntime.InvokeVoidAsync("hideModal", "EditModal");
        await LoadData(currentPage);

        StateHasChanged();

    }
    private async void HandleDeleteModel(int id)
    {
        var response = await productService.DeleteProduct(id);

        //show toast if data not found----------------------

        await JSRuntime.InvokeVoidAsync("hideModal", "DeleteModal");
        await LoadData(currentPage);

        StateHasChanged();
    }
    private async void ShowDeleteModel(int id)
    {
        GetProductDtos? data = await productService.GetProduct(id);

        //show toast if data not found----------------------

        product = data ?? new();

        await JSRuntime.InvokeVoidAsync("showModal", "DeleteModal");
        StateHasChanged();

    }
}
